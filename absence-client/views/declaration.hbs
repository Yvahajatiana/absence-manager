<div class="hero-section">
  <div class="hero-content">
    <h1 class="page-title">üìã D√©claration d'Absence</h1>
    <p class="page-subtitle">Remplissez ce formulaire pour b√©n√©ficier de notre service de surveillance</p>
  </div>
</div>

{{#if errors}}
<div class="error-message">
  <h4>‚ùå Erreurs d√©tect√©es :</h4>
  <ul style="margin: 0.5rem 0 0 1rem;">
    {{#each errors}}
    <li>{{this}}</li>
    {{/each}}
  </ul>
</div>
{{/if}}

<div class="form-container">
  <form action="/declaration" method="POST">
    <h2 class="section-title">Informations personnelles</h2>

    <div class="form-row">
      <div class="form-group">
        <label for="firstname">Pr√©nom *</label>
        <input type="text" id="firstname" name="firstname" value="{{formData.firstname}}" required minlength="2"
          maxlength="50">
      </div>

      <div class="form-group">
        <label for="lastname">Nom *</label>
        <input type="text" id="lastname" name="lastname" value="{{formData.lastname}}" required minlength="2"
          maxlength="50">
      </div>
    </div>

    <div class="form-row">
      <div class="form-group">
        <label for="phone">T√©l√©phone *</label>
        <input type="tel" id="phone" name="phone" value="{{formData.phone}}" placeholder="0123456789" required
          pattern="^(\+33|0)[1-9](\d{8})$" title="Format : 0123456789 ou +33123456789">
      </div>

      <div class="form-group">
        <label for="email">Email (optionnel)</label>
        <input type="email" id="email" name="email" value="{{formData.email}}" placeholder="votre.email@exemple.fr">
      </div>
    </div>

    <div class="form-group">
      <label for="adresseDomicile">Adresse du domicile *</label>
      <textarea id="adresseDomicile" name="adresseDomicile" rows="3" required minlength="10" maxlength="500"
        placeholder="Votre adresse compl√®te : num√©ro, rue, code postal, ville">{{formData.adresseDomicile}}</textarea>
    </div>

    <h2 class="section-title">P√©riode d'absence</h2>

    <div class="form-row">
      <div class="form-group">
        <label for="dateDebut">Date de d√©but *</label>
        <input type="date" id="dateDebut" name="dateDebut" value="{{formData.dateDebut}}" required>
        <small style="color: #666; font-size: 0.9rem;">Minimum 48h √† l'avance</small>
      </div>

      <div class="form-group">
        <label for="dateFin">Date de fin *</label>
        <input type="date" id="dateFin" name="dateFin" value="{{formData.dateFin}}" required>
        <small style="color: #666; font-size: 0.9rem;">Maximum 30 jours apr√®s le d√©but</small>
      </div>
    </div>

    <div class="alert alert-info">
      <h3>‚ÑπÔ∏è Informations importantes</h3>
      <ul>
        <li>La d√©claration doit √™tre faite au moins 48h avant votre d√©part</li>
        <li>L'absence doit √™tre d'au minimum 24 heures</li>
        <li>La dur√©e maximale est de 30 jours par d√©claration</li>
        <li>Vos informations sont confidentielles et s√©curis√©es</li>
        <li>En cas d'anomalie, vous serez contact√© imm√©diatement</li>
      </ul>
    </div>

    <div class="text-center" style="margin-top: 2rem;">
      <button type="button" onclick="history.back()" class="btn btn-secondary">
        ‚Üê Retour
      </button>
      <button type="submit" class="btn btn-primary">
        üìã Envoyer la d√©claration
      </button>
    </div>
  </form>
</div>

<script>
  // Validation des dates c√¥t√© client
  document.addEventListener('DOMContentLoaded', function () {
    const dateDebut = document.getElementById('dateDebut');
    const dateFin = document.getElementById('dateFin');

    // D√©finir la date minimale (48h √† l'avance)
    const now = new Date();
    const minDate = new Date(now.getTime() + 48 * 60 * 60 * 1000);
    dateDebut.min = minDate.toISOString().split('T')[0];

    function validateDates() {
      if (dateDebut.value && dateFin.value) {
        const debut = new Date(dateDebut.value);
        const fin = new Date(dateFin.value);
        const diffTime = Math.abs(fin - debut);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (fin <= debut) {
          dateFin.setCustomValidity('La date de fin doit √™tre apr√®s la date de d√©but');
        } else if (diffDays > 30) {
          dateFin.setCustomValidity('La dur√©e maximale est de 30 jours');
        } else {
          dateFin.setCustomValidity('');
        }
      }
    }

    dateDebut.addEventListener('change', validateDates);
    dateFin.addEventListener('change', validateDates);

    // Mise √† jour du min de dateFin quand dateDebut change
    dateDebut.addEventListener('change', function () {
      if (this.value) {
        const nextDay = new Date(this.value);
        nextDay.setDate(nextDay.getDate() + 1);
        dateFin.min = nextDay.toISOString().split('T')[0];
      }
    });
  });
</script>